using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Navigation;
using Windows.Media.Capture;      //For MediaCapture  
using Windows.Media.MediaProperties;  //For Encoding Image in JPEG format  
using Windows.Storage;         //For storing Capture Image in App storage or in Picture Library  
using Windows.UI.Xaml.Media.Imaging;  //For BitmapImage. for showing image on screen we need BitmapImage format.  
using System.Threading;
using Windows.Storage.Streams;
using Windows.Phone.Media.Devices;
using Windows.Devices.Enumeration;
using Windows.UI;
using Windows.UI.Core;
using Windows.Graphics.Display;
using Windows.Media.Devices;
using Windows.UI.Popups;
using Windows.Devices.Sensors;

//using Windows.Xna.Framework;
// Документацию по шаблону элемента пустой страницы см. по адресу http://go.microsoft.com/fwlink/?LinkID=390556

namespace WinPhoneAppTest
{
    /// <summary>
    /// Пустая страница, которую можно использовать саму по себе или для перехода внутри фрейма.
    /// </summary>
    public sealed partial class Dalnomer : Page
    {
        Windows.Media.Capture.MediaCapture captureManager;
        ImageEncodingProperties imgFormat = ImageEncodingProperties.CreateJpeg();
        WriteableBitmap wb;
        BitmapImage bi;
        DispatcherTimer dt;
        Double degrees;
        Double height_my;
        Double distance;
        Accelerometer _accelerometer;

        public Dalnomer()
        {

            InitializeComponent();
            dt = new DispatcherTimer();
            dt.Tick += dispatcherTimer_Tick;
            dt.Interval = new TimeSpan(0, 0, 1);
            
        }

        /// <summary>
        /// Вызывается перед отображением этой страницы во фрейме.
        /// </summary>
        /// <param name="e">Данные события, описывающие, каким образом была достигнута эта страница.
        /// Этот параметр обычно используется для настройки страницы.</param>
        protected override void OnNavigatedTo(NavigationEventArgs e)
        {
        }
        private VideoRotation VideoRotationLookup(DisplayOrientations displayOrientation, bool counterclockwise)
        {
            switch (displayOrientation)
            {
                case DisplayOrientations.Landscape:
                    return VideoRotation.None;

                case DisplayOrientations.Portrait:
                    return (counterclockwise) ? VideoRotation.Clockwise270Degrees : VideoRotation.Clockwise90Degrees;

                case DisplayOrientations.LandscapeFlipped:
                    return VideoRotation.Clockwise180Degrees;

                case DisplayOrientations.PortraitFlipped:
                    return (counterclockwise) ? VideoRotation.Clockwise90Degrees :
                    VideoRotation.Clockwise270Degrees;

                default:
                    return VideoRotation.None;
            }
        }
        private void DisplayInfo_OrientationChanged(DisplayInformation sender, object args)
        {
            if (captureManager != null)
            {
                captureManager.SetPreviewRotation(false
                ? VideoRotationLookup(sender.CurrentOrientation, true)
                : VideoRotationLookup(sender.CurrentOrientation, false));
                var rotation = VideoRotationLookup(sender.CurrentOrientation, false);
                captureManager.SetPreviewRotation(rotation);
            }
        }




        async private void Grid_Loaded(object sender, RoutedEventArgs e)
        {
            var appView = Windows.UI.ViewManagement.ApplicationView.GetForCurrentView();
            appView.SetDesiredBoundsMode(Windows.UI.ViewManagement.ApplicationViewBoundsMode.UseCoreWindow);
            DeviceInformationCollection webcamList = await DeviceInformation.FindAllAsync(DeviceClass.All);
            // Same for the back webcam
            DeviceInformation backWebcam = (from webcam in webcamList
                                            where webcam.EnclosureLocation != null
                                            && webcam.EnclosureLocation.Panel == Windows.Devices.Enumeration.Panel.Back
                                            select webcam).FirstOrDefault();
            captureManager = new MediaCapture();    //Define MediaCapture object  
            await captureManager.InitializeAsync(new MediaCaptureInitializationSettings     //Initialize MediaCapture and  
            {
                // Choose the webcam you want
                VideoDeviceId = backWebcam.Id,
                AudioDeviceId = "",
                StreamingCaptureMode = StreamingCaptureMode.Video,
                PhotoCaptureSource = PhotoCaptureSource.Photo
            });
            // captureManager.SetPreviewRotation(VideoRotation.Clockwise90Degrees);
            capturePreview.Source = captureManager;   //Start preiving on CaptureElement  
            await captureManager.StartPreviewAsync();  //Start camera capturing   
                                                       //capturePreview.Source = bi;

            captureManager.SetPreviewRotation(VideoRotation.Clockwise90Degrees);

            DisplayInformation displayInfo = DisplayInformation.GetForCurrentView();
            displayInfo.OrientationChanged += DisplayInfo_OrientationChanged;

            //DisplayInfo_OrientationChanged(displayInfo, null);

            Rect bounds = Windows.UI.Xaml.Window.Current.Bounds;
            //capturePreview.RenderTransform = new CompositeTransform() { Rotation = 90};
            double scaleFactor = DisplayInformation.GetForCurrentView().RawPixelsPerViewPixel;
            //capturePreview.Height = bounds.Width * scaleFactor;
            //capturePreview.Width = bounds.Height * scaleFactor;
            wb = new WriteableBitmap((int)bounds.Width, (int)bounds.Height);
            wb.DrawLine(((int)bounds.Width / 2) - 100, (int)bounds.Height / 2, ((int)bounds.Width / 2) + 100, (int)bounds.Height / 2, Colors.Red);
            wb.Invalidate();
            image.Source = wb;
        }


        async private void ReadingChanged(object sender, AccelerometerReadingChangedEventArgs e)
        {
            await Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>
            {
                AccelerometerReading reading = e.Reading;
                textBox2.Text = String.Format("{0,5:0.00}", reading.AccelerationX);
                textBox3.Text = String.Format("{0,5:0.00}", reading.AccelerationY);
                textBox4.Text = String.Format("{0,5:0.00}", reading.AccelerationZ);
            });
        }

        async private void dispatcherTimer_Tick(object sender, object e)
        {

            _accelerometer = Accelerometer.GetDefault();


            if (_accelerometer != null)
            {
                // Establish the report interval
                _accelerometer.ReadingChanged += new TypedEventHandler<Accelerometer, AccelerometerReadingChangedEventArgs>(ReadingChanged);

            }
            else
            {
                MessageDialog msgbox = new MessageDialog("No Accelerometer found", "Заголовок окна");
                await msgbox.ShowAsync();
            }


            if(textBox.Text!= "Введите высоту в сантиметрах")
            { 
             height_my = Convert.ToDouble( textBox.Text);
             distance=Math.Tan(degrees)*height_my;
            textBox1.Text = (""+distance+"");
            }
            //do whatever you want to do here

            //using (var imageStream = new InMemoryRandomAccessStream())
            //{
            //    await captureManager.CapturePhotoToStreamAsync(imgFormat, imageStream);
            //    await imageStream.FlushAsync();
            //    imageStream.Seek(0);

            //    wb = new WriteableBitmap((int)capturePreview.ActualWidth, (int)capturePreview.ActualHeight);
            //    await wb.SetSourceAsync(imageStream);
            //    wb.DrawLine(-70, 0, +70, 0, Colors.Red);
            //    wb.Invalidate();

            //}


        }

        private void textBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            dt.Start();
        }
    }
}
